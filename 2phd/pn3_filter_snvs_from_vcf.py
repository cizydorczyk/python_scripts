#!/usr/bin/env python3
"""
Author : Conrad Izydorczyk <conrad.izydorczyk@ucalgary.ca>
Date   : 2023-03-22
Purpose: Remove SNVs from PAV/SVIM-asm combined vcf (generated by Jasmine)
"""

import argparse


# --------------------------------------------------
def get_args():
    """Get command-line arguments"""

    parser = argparse.ArgumentParser(
        description='Remove SNVs from PAV/SVIM-asm combined vcf (generated by Jasmine)',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)


    parser.add_argument('--input_vcf',
                        help='Input VCF from jasmine containing SVIM-asm/PAV combined variants',
                        metavar='str',
                        type=str,
                        required=True)
    
    parser.add_argument('--chromosome',
                        help="Name of the reference chromosome in the VCF file",
                        metavar='str',
                        type=str,
                        required=True)
    
    parser.add_argument("--output_vcf",
                        help="VCF without SNVs; need to sort through indels still manually",
                        metavar='str',
                        type=str,
                        required=True)

    return parser.parse_args()


# --------------------------------------------------
def main():
    """Filter VCF"""

    args = get_args()
    
    input_vcf = args.input_vcf
    chrom = args.chromosome

    output_vcf_lines = []
    with open(input_vcf, "r") as infile1:
        for line in infile1:
            # If line is a header line:
            if not line.startswith(chrom):
                output_vcf_lines.append(line)
            # Elif line is a variatn record:
            elif line.startswith(chrom):
                line_elements = line.strip().split("\t")
                # If variant is not a SNV:
                if "SVTYPE=SNV" not in line:
                    output_vcf_lines.append(line)

    output_lines = "".join(output_vcf_lines)

    with open(args.output_vcf, "w") as outfile1:
        outfile1.write(output_lines)



# --------------------------------------------------
if __name__ == '__main__':
    main()
